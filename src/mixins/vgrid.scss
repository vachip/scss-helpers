@import './count';


$vgrid-grid-gap: 1rem !default;

// If more than 100 cells... adjust variable
$vgrid-max-items: 100 !default;
$vgrid-max-cols: 12 !default;
// 62.5 seconds with 100, 12  8.45 MiB

@mixin vgrids(
$max-items: $vgrid-max-items,
$max-cols: $vgrid-max-cols,
) {
  .vgrid-1 {
    display: grid;
    grid-gap: $vgrid-grid-gap;
  }

  @for $c from 2 through $max-cols {
    .vgrid-#{$c} {
      display: grid;

      $pct: calc(100% - calc(#{$vgrid-grid-gap} * #{$c - 1}));
      grid-gap: $vgrid-grid-gap;
      grid-template-columns: repeat(#{$c}, calc(#{$pct} / #{$c}));

      $rMap: ('1': ''); // row: $n
      // $cMap: ('1': ''); // col: $n

      @for $t from 2 through $max-items {

        $rMap: map-merge($rMap, ($t: '')); // row: $n
        // $cMap: map-merge($cMap, ($t: '')); // col: $n

        $rMaxed: ceil(calc($t/$c));
        $cMaxed: $t % $c;
        @if ($cMaxed == 0) {
          $cMaxed: $c;
        }
        $breakpoint: calc($rMaxed * $cMaxed);

        @for $n from 2 through $breakpoint {
          // $col: calc($n / $rMaxed);
          $row: $n % $rMaxed;
          @if ($row == 0) {
            $row: $rMaxed;
          }

          $sel1: '*:first-child:nth-last-child(#{$t}):nth-child(#{$n}),';
          $sel2: '*:first-child:nth-last-child(#{$t}) ~ *:nth-child(#{$n}),';

          $rMap: map-merge($rMap, ($row: append(map-get($rMap, $row), $sel1)));
          $rMap: map-merge($rMap, ($row: append(map-get($rMap, $row), $sel2)));
          // $cMap: map-merge($cMap, ($col: append(map-get($cMap, $col), $sel1)));
          // $cMap: map-merge($cMap, ($col: append(map-get($cMap, $col), $sel2)));
        }
        @if ($breakpoint+1 <= $t) {

          @for $n from ($breakpoint+1) through $t {
            // $col: calc(($n - $breakpoint) / ($rMaxed - 1)) + $cMaxed;
            $row: ($n - $breakpoint) % ($rMaxed - 1);
            @if ($row == 0) {
              $row: $rMaxed - 1;
            }

            $sel1: '*:first-child:nth-last-child(#{$t}):nth-child(#{$n}),';
            $sel2: '*:first-child:nth-last-child(#{$t}) ~ *:nth-child(#{$n}),';

            $rMap: map-merge($rMap, ($row: append(map-get($rMap, $row), $sel1)));
            $rMap: map-merge($rMap, ($row: append(map-get($rMap, $row), $sel2)));
            // $cMap: map-merge($cMap, ($col: append(map-get($cMap, $col), $sel1)));
            // $cMap: map-merge($cMap, ($col: append(map-get($cMap, $col), $sel2)));
          }
        }
      }

      @for $i from 2 through $max-items {
        $rList: map-get($rMap, $i);
        // $cList: map-get($cMap, $i);
        @if ($rList != '') {
          #{$rList} {
            grid-row: $i;
          }
        }
        // @if ($cList != '') {
        //   #{$cList} {
        //     grid-column: $i;
        //   }
        // }
      }
    }
  }
}

@mixin vgrid($numItems, $columns) {
  @include vcell($numItems, $columns);
  // TODO - breakpoints
}

@mixin vcell(
$numItems,
$numCols: 1,
$selector: '.vcell',
$reserveLastCell: false
) {

  $numRows: ceil(calc($numItems / $numCols));
  $numFullCols: $numCols - ($numRows * $numCols) + $numItems;
  @if ($reserveLastCell) {
    $numFullCols: $numFullCols - 1;
  }

  @include has-count($numItems, '*') {
    // Go through each column row-by-row and find the item
    $done: [];
    @for $c from 1 through $numCols {

      $r: 1;
      $maxRow: $numRows;
      @if ($c > $numFullCols) {
        $maxRow: $numRows - 1;
      }

      // Find the item for this cell
      @for $i from 0 to $numItems {
        @if (index($done, $i) == null) {
          @for $c2 from $c through $numCols {
            @if (index($done, $i) == null and $r <= $maxRow and ($i < ($c * $numRows))) {
              &:nth-child(#{$i+1}) {
                grid-column: $c;
                grid-row: $r;
              }
              $r: $r + 1;
              $done: append($done, $i);
            }
          }
        }
      }
    }
    // Always last cell (bottom/right) - keep at end of mixin
    @if($reserveLastCell) {
      > #{$selector}-last {
        grid-column: $numCols;
        grid-row: $numRows;
      }
    }
  }
}

//
// @mixin vcell-obsolete(
// $numItems,
// $numCols: 1,
// $selector: '.vcell',
// $grid-gap: $vgrid-grid-gap,
// $reserveLastCell: false
// ) {
//   $pct: calc(100% - calc(#{$grid-gap} * #{$numCols - 1}));
//
//   $numRows: ceil(calc($numItems / $numCols));
//   $numFullCols: $numCols - ($numRows * $numCols) + $numItems;
//   @if ($reserveLastCell) {
//     $numFullCols: $numFullCols - 1;
//   }
//
//   grid-gap: $vgrid-grid-gap;
//   grid-template-columns: repeat(#{$numCols}, calc(#{$pct} / #{$numCols}));
//
//   // Go through each column row-by-row and find the item
//   $done: [];
//   @for $c from 1 through $numCols {
//
//     $r: 1;
//     $maxRow: $numRows;
//     @if ($c > $numFullCols) {
//       $maxRow: $numRows - 1;
//     }
//
//     // Find the item for this cell
//     @for $i from 0 to $numItems {
//       @if (index($done, $i) == null) {
//         @for $c2 from $c through $numCols {
//           @if (index($done, $i) == null and $r <= $maxRow and ($i < ($c * $numRows))) {
//             > #{$selector}-#{$i+1} {
//               grid-column: $c;
//               grid-row: $r;
//             }
//             $r: $r + 1;
//             $done: append($done, $i);
//           }
//         }
//       }
//     }
//   }
//   // Always last cell (bottom/right) - keep at end of mixin
//   @if($reserveLastCell) {
//     > #{$selector}-last {
//       grid-column: $numCols;
//       grid-row: $numRows;
//     }
//   }
// }
